---

import Card from "./Card.astro";
import Modal from "./Modal.astro";


interface Props {
	cards: {title: string, id: string, content: string[], img_path: string, technos: string[], tools: string[]}[];
};

const { cards } = Astro.props;
---



<div class="relative w-full max-w-xs sm:max-w-sm md:max-w-md lg:max-w-lg xl:max-w-xl mx-auto dark:bg-gray-900 mb-[90px]">
        <main id="slider-container" class="relative w-full h-[400px] sm:h-[380px] md:h-[360px] [perspective:1200px]">
        {cards.map((card) => (
          <article class="slide absolute inset-0 p-0 m-0">
            <Card toggle={card.id} title={card.title} desc={card.content[0]} img_path={card.img_path} class="w-full"></Card>
          </article>
        ))}
        </main>

        {cards.map((card) => (
          <Modal id={card.id} title={card.title} content={card.content}, technos={card.technos} tools={card.tools}/>
        ))}

        <button id="prevButton" title="Previous testimonial" class="dark:bg-gray-800 absolute top-1/2 left-[-16px] sm:left-[-24px] md:left-[-30px] transform -translate-y-1/2 z-20 w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-white/80 backdrop-blur-sm shadow-md hover:bg-white focus:bg-white flex items-center justify-center text-stone-500 hover:text-stone-700 focus:text-stone-700 focus:outline-none transition-all duration-200">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-4 h-4 sm:w-5 sm:h-5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
            </svg>
        </button>
        <button id="nextButton" title="Next testimonial" class="dark:bg-gray-800 absolute top-1/2 right-[-16px] sm:right-[-24px] md:right-[-30px] transform -translate-y-1/2 z-20 w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-white/80 backdrop-blur-sm shadow-md hover:bg-white focus:bg-white flex items-center justify-center text-stone-500 hover:text-stone-700 focus:text-stone-700 focus:outline-none transition-all duration-200">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2.5" stroke="currentColor" class="w-4 h-4 sm:w-5 sm:h-5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
            </svg>
        </button>
    </div><script async src="https://www.googletagmanager.com/gtag/js?id=G-LLWL5N9CSM"></script>



<script>
	document.addEventListener('DOMContentLoaded', () => {
  const sliderContainer = document.getElementById('slider-container');
  const slides = Array.from(sliderContainer.querySelectorAll('.slide'));
  const numSlides = slides.length;
  let currentActiveIndex = 0;

  const prevButton = document.getElementById('prevButton');
  const nextButton = document.getElementById('nextButton');

  function updateSlideStates() {
    if (numSlides === 0) return;

    for (let i = 0; i < numSlides; i++) {
      const slide = slides[i];
      let status = 'hidden';

      let diff = i - currentActiveIndex;
      if (diff > numSlides / 2) {
        diff -= numSlides;
      } else if (diff < -numSlides / 2) {
        diff += numSlides;
      }

      if (diff === 0) {
        status = 'active';
      } else if (numSlides > 1 && diff === 1) {
        status = 'next';
      } else if (numSlides > 2 && diff === -1) {
        status = 'prev';
      } else if (numSlides > 3 && diff === 2) {
        status = 'background-next';
      } else if (numSlides > 4 && diff === -2) {
        status = 'background-prev';
      }

      if (numSlides === 2 && diff === -1) {
        status = 'next';
      }
      if (numSlides === 3 && diff === -2) { // For N=3, diff=-2 is same as diff=1 ('next')
        // This case is diff=2, which normalizes to diff=-1 for N=3, so 'prev'
        // The diff calc already handles this.
      }
      if (numSlides === 4 && diff === -2) { // For N=4, diff=-2 is same as diff=2 ('background-next')
        status = 'background-next';
      }


      slide.dataset.status = status;

      slide.classList.remove('shadow-xl', 'shadow-lg', 'shadow-md');
      if (status === 'active') slide.classList.add('shadow-xl');
      else if (status === 'next' || status === 'prev') slide.classList.add('shadow-lg');
      else if (status === 'background-next' || status === 'background-prev') slide.classList.add('shadow-md');
    }
  }

  if (numSlides > 0) {
    updateSlideStates();
  } else {
    if (sliderContainer) sliderContainer.innerHTML = '<p class="text-stone-500 text-center p-10 absolute inset-0 flex items-center justify-center">No testimonials available.</p>';
  }

  if (numSlides <= 1) {
    if (prevButton) prevButton.style.display = 'none';
    if (nextButton) nextButton.style.display = 'none';
  } else {
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        currentActiveIndex = (currentActiveIndex - 1 + numSlides) % numSlides;
        updateSlideStates();
      });
    }
    if (nextButton) {
      nextButton.addEventListener('click', () => {
        currentActiveIndex = (currentActiveIndex + 1) % numSlides;
        updateSlideStates();
      });
    }
  }
});
</script>